{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1d-qJgwIf2PqQmmDNllKJf-QLcWOF3msa","timestamp":1700764931604},{"file_id":"12urqNTG0OWYgP__FN_-oG3wkPyMU39sS","timestamp":1700606637004}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"b0a62fedcef5420da46bb6a959f65f29":{"model_module":"@jupyter-widgets/controls","model_name":"VBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_c2a911f398304ea8a0c2aa65c3b89c44","IPY_MODEL_902f6b8a60764e85b7a3191a5b2bee52"],"layout":"IPY_MODEL_f5dc650b1f1d49aa8216b35e2eaddfd2"}},"c2a911f398304ea8a0c2aa65c3b89c44":{"model_module":"@jupyter-widgets/controls","model_name":"LabelModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"LabelModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"LabelView","description":"","description_tooltip":null,"layout":"IPY_MODEL_63d3bf55795046099727ad1b5cf0b4f7","placeholder":"​","style":"IPY_MODEL_8a394ad801214fe68cf6db76d77aff53","value":"13.037 MB of 13.037 MB uploaded\r"}},"902f6b8a60764e85b7a3191a5b2bee52":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_7fff7f0abebf43b8a15509de3220e391","max":1,"min":0,"orientation":"horizontal","style":"IPY_MODEL_8eabfea3bb824a28b8a24b906d09b9e8","value":1}},"f5dc650b1f1d49aa8216b35e2eaddfd2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"63d3bf55795046099727ad1b5cf0b4f7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8a394ad801214fe68cf6db76d77aff53":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"7fff7f0abebf43b8a15509de3220e391":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8eabfea3bb824a28b8a24b906d09b9e8":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}}}}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"BEaqYZU_Uush","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1704290407199,"user_tz":180,"elapsed":20570,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}},"outputId":"13fbb340-84fd-49bb-9e39-eabe732bb6b3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting wandb\n","  Downloading wandb-0.16.1-py3-none-any.whl (2.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m9.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: Click!=8.0.0,>=7.1 in /usr/local/lib/python3.10/dist-packages (from wandb) (8.1.7)\n","Collecting GitPython!=3.1.29,>=1.0.0 (from wandb)\n","  Downloading GitPython-3.1.40-py3-none-any.whl (190 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m190.6/190.6 kB\u001b[0m \u001b[31m11.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: requests<3,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from wandb) (2.31.0)\n","Requirement already satisfied: psutil>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from wandb) (5.9.5)\n","Collecting sentry-sdk>=1.0.0 (from wandb)\n","  Downloading sentry_sdk-1.39.1-py2.py3-none-any.whl (254 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m254.1/254.1 kB\u001b[0m \u001b[31m10.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting docker-pycreds>=0.4.0 (from wandb)\n","  Downloading docker_pycreds-0.4.0-py2.py3-none-any.whl (9.0 kB)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from wandb) (6.0.1)\n","Collecting setproctitle (from wandb)\n","  Downloading setproctitle-1.3.3-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (30 kB)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from wandb) (67.7.2)\n","Requirement already satisfied: appdirs>=1.4.3 in /usr/local/lib/python3.10/dist-packages (from wandb) (1.4.4)\n","Requirement already satisfied: protobuf!=4.21.0,<5,>=3.19.0 in /usr/local/lib/python3.10/dist-packages (from wandb) (3.20.3)\n","Requirement already satisfied: six>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from docker-pycreds>=0.4.0->wandb) (1.16.0)\n","Collecting gitdb<5,>=4.0.1 (from GitPython!=3.1.29,>=1.0.0->wandb)\n","  Downloading gitdb-4.0.11-py3-none-any.whl (62 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.7/62.7 kB\u001b[0m \u001b[31m3.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.0.0->wandb) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.0.0->wandb) (3.6)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.0.0->wandb) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.0.0->wandb) (2023.11.17)\n","Collecting smmap<6,>=3.0.1 (from gitdb<5,>=4.0.1->GitPython!=3.1.29,>=1.0.0->wandb)\n","  Downloading smmap-5.0.1-py3-none-any.whl (24 kB)\n","Installing collected packages: smmap, setproctitle, sentry-sdk, docker-pycreds, gitdb, GitPython, wandb\n","Successfully installed GitPython-3.1.40 docker-pycreds-0.4.0 gitdb-4.0.11 sentry-sdk-1.39.1 setproctitle-1.3.3 smmap-5.0.1 wandb-0.16.1\n"]}],"source":["!pip install wandb"]},{"cell_type":"code","source":["import wandb\n","import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import pickle\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report\n","from sklearn.base import BaseEstimator, TransformerMixin\n","from sklearn.pipeline import Pipeline\n","from sklearn.preprocessing import LabelEncoder"],"metadata":{"id":"JBu7fLnTVTyk","executionInfo":{"status":"ok","timestamp":1704290752993,"user_tz":180,"elapsed":4604,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# Login to Weights & Biases\n","!wandb login --relogin"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mTNWb-rpVZNA","executionInfo":{"status":"ok","timestamp":1704145112383,"user_tz":180,"elapsed":13947,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}},"outputId":"741ea0d3-2d85-4082-f3db-8ac24d270c20"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Logging into wandb.ai. (Learn how to deploy a W&B server locally: https://wandb.me/wandb-server)\n","\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n","\u001b[34m\u001b[1mwandb\u001b[0m: Paste an API key from your profile and hit enter, or press ctrl+c to quit: \n","\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"]}]},{"cell_type":"markdown","source":["## Get Artifacts"],"metadata":{"id":"AV9l0DrhKsuG"}},{"cell_type":"code","source":["run = wandb.init(entity=\"flateam\", project=\"the_simpsons_characters\", job_type=\"train_model\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":121},"id":"jswmjmFxK89T","executionInfo":{"status":"ok","timestamp":1704145150027,"user_tz":180,"elapsed":2211,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}},"outputId":"1529b48d-cf90-477f-b1bd-874eb30e3f64"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mandre-silva1ifrn\u001b[0m (\u001b[33mflateam\u001b[0m). Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["Tracking run with wandb version 0.16.1"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["Run data is saved locally in <code>/content/wandb/run-20240101_213901-bawowdf5</code>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["Syncing run <strong><a href='https://wandb.ai/flateam/the_simpsons_characters/runs/bawowdf5' target=\"_blank\">dulcet-gorge-31</a></strong> to <a href='https://wandb.ai/flateam/the_simpsons_characters' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":[" View project at <a href='https://wandb.ai/flateam/the_simpsons_characters' target=\"_blank\">https://wandb.ai/flateam/the_simpsons_characters</a>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":[" View run at <a href='https://wandb.ai/flateam/the_simpsons_characters/runs/bawowdf5' target=\"_blank\">https://wandb.ai/flateam/the_simpsons_characters/runs/bawowdf5</a>"]},"metadata":{}}]},{"cell_type":"code","source":["img_path = run.use_artifact('flateam/the_simpsons_characters/img_data_train:v0', type='split_data').file()\n","df_img = np.load(img_path)\n","\n","labels_path = run.use_artifact('flateam/the_simpsons_characters/label_data_train:v0', type='split_data').file()\n","df_labels = pd.read_csv(labels_path)\n","df_labels = df_labels['character name']"],"metadata":{"id":"leLsDF4RLXnL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(df_labels.unique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o8v0ribTPujy","executionInfo":{"status":"ok","timestamp":1704138039318,"user_tz":180,"elapsed":3,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}},"outputId":"55e67b77-6d22-4f46-e7d4-1017a5d88682"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["42"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","source":["# Split Data"],"metadata":{"id":"yQzpJrLtOLfs"}},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(df_img, df_labels, test_size=0.2, random_state=42, stratify=df_labels)"],"metadata":{"id":"QCeEy_anOKOJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Create Model"],"metadata":{"id":"Fa31GafgQDBo"}},{"cell_type":"code","source":["import keras\n","from keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img\n","from keras.models import Sequential\n","from keras.layers import Dropout, Flatten, Dense, Conv2D, MaxPooling2D, Flatten, Dense\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import os\n","import tensorflow as tf\n","import cv2\n","from tensorflow.keras.callbacks import EarlyStopping\n","import glob"],"metadata":{"id":"24YjXtUiR1Ot","executionInfo":{"status":"ok","timestamp":1704290811359,"user_tz":180,"elapsed":809,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["model = tf.keras.Sequential([\n","    tf.keras.layers.Conv2D(filters=32, kernel_size=(2,2), activation='relu', input_shape=(100, 100, 4)),\n","    tf.keras.layers.MaxPooling2D((4,4)),\n","\n","    tf.keras.layers.ZeroPadding2D(padding=(1,1)),\n","    tf.keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation='relu', padding='valid'),\n","    tf.keras.layers.MaxPooling2D((3,3)),\n","    tf.keras.layers.Dropout(0.3),\n","\n","    tf.keras.layers.Conv2D(filters=64, kernel_size=(4,4), activation='relu', padding='same'),\n","    tf.keras.layers.Conv2D(filters=128, kernel_size=(5,5), activation='relu', padding='same'),\n","    tf.keras.layers.MaxPooling2D((2,2)),\n","    tf.keras.layers.Dropout(0.4),\n","\n","    tf.keras.layers.Conv2D(filters=128, kernel_size=(5,5), activation='relu', padding='same'),\n","    tf.keras.layers.MaxPooling2D((2,2)),\n","    tf.keras.layers.Dropout(0.5),\n","\n","    tf.keras.layers.Flatten(),\n","    tf.keras.layers.Dense(512, activation='relu'),\n","    tf.keras.layers.Dropout(0.5),\n","    tf.keras.layers.Dense(256, activation='relu'),\n","    tf.keras.layers.Dropout(0.3),\n","    tf.keras.layers.Dense(128, activation='relu'),\n","    tf.keras.layers.Dense(42, activation='softmax')\n","])\n","\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"USoqJ80ZRRoe","executionInfo":{"status":"ok","timestamp":1704136421143,"user_tz":180,"elapsed":1772,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}},"outputId":"ee6fb542-dc5c-404f-ab51-ade4c559abc3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 99, 99, 32)        544       \n","                                                                 \n"," max_pooling2d (MaxPooling2  (None, 24, 24, 32)        0         \n"," D)                                                              \n","                                                                 \n"," zero_padding2d (ZeroPaddin  (None, 26, 26, 32)        0         \n"," g2D)                                                            \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 24, 24, 64)        18496     \n","                                                                 \n"," max_pooling2d_1 (MaxPoolin  (None, 8, 8, 64)          0         \n"," g2D)                                                            \n","                                                                 \n"," dropout (Dropout)           (None, 8, 8, 64)          0         \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 8, 8, 64)          65600     \n","                                                                 \n"," conv2d_3 (Conv2D)           (None, 8, 8, 128)         204928    \n","                                                                 \n"," max_pooling2d_2 (MaxPoolin  (None, 4, 4, 128)         0         \n"," g2D)                                                            \n","                                                                 \n"," dropout_1 (Dropout)         (None, 4, 4, 128)         0         \n","                                                                 \n"," conv2d_4 (Conv2D)           (None, 4, 4, 128)         409728    \n","                                                                 \n"," max_pooling2d_3 (MaxPoolin  (None, 2, 2, 128)         0         \n"," g2D)                                                            \n","                                                                 \n"," dropout_2 (Dropout)         (None, 2, 2, 128)         0         \n","                                                                 \n"," flatten (Flatten)           (None, 512)               0         \n","                                                                 \n"," dense (Dense)               (None, 512)               262656    \n","                                                                 \n"," dropout_3 (Dropout)         (None, 512)               0         \n","                                                                 \n"," dense_1 (Dense)             (None, 256)               131328    \n","                                                                 \n"," dropout_4 (Dropout)         (None, 256)               0         \n","                                                                 \n"," dense_2 (Dense)             (None, 128)               32896     \n","                                                                 \n"," dense_3 (Dense)             (None, 42)                5418      \n","                                                                 \n","=================================================================\n","Total params: 1131594 (4.32 MB)\n","Trainable params: 1131594 (4.32 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["label_encoder = LabelEncoder()\n","y_train_encoded = label_encoder.fit_transform(y_train)\n","y_test_encoded = label_encoder.transform(y_test)"],"metadata":{"id":"IlUl_pFHGHus"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=('accuracy'))"],"metadata":{"id":"Nq8n0rC1aUU_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["earlystopping = tf.keras.callbacks.EarlyStopping(monitor = 'val_accuracy', mode = 'max', verbose = 1, patience = 50)"],"metadata":{"id":"ijwmPsZMaX2U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["checkpointer = tf.keras.callbacks.ModelCheckpoint(filepath=\"thesimpsonscharacters_weights.hdf5\", verbose=1, save_best_only=True, monitor='val_accuracy', mode='max')"],"metadata":{"id":"7MmieXr3aegC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["history = model.fit(X_train, y_train_encoded, validation_data=(X_test, y_test_encoded), epochs=50, batch_size=32, callbacks=[checkpointer, earlystopping])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5Di7cH74avfs","executionInfo":{"status":"ok","timestamp":1704136781945,"user_tz":180,"elapsed":330857,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}},"outputId":"66b7a555-7e2a-46c6-afaa-c8f9bb45f51c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","419/419 [==============================] - ETA: 0s - loss: 3.1667 - accuracy: 0.0965\n","Epoch 1: val_accuracy improved from -inf to 0.10749, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 17s 20ms/step - loss: 3.1667 - accuracy: 0.0965 - val_loss: 3.1070 - val_accuracy: 0.1075\n","Epoch 2/50\n","  1/419 [..............................] - ETA: 9s - loss: 3.0504 - accuracy: 0.1250"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]},{"output_type":"stream","name":"stdout","text":["415/419 [============================>.] - ETA: 0s - loss: 3.0471 - accuracy: 0.1267\n","Epoch 2: val_accuracy improved from 0.10749 to 0.14572, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 14ms/step - loss: 3.0462 - accuracy: 0.1268 - val_loss: 2.8347 - val_accuracy: 0.1457\n","Epoch 3/50\n","418/419 [============================>.] - ETA: 0s - loss: 2.7251 - accuracy: 0.1922\n","Epoch 3: val_accuracy improved from 0.14572 to 0.31741, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 14ms/step - loss: 2.7250 - accuracy: 0.1921 - val_loss: 2.3655 - val_accuracy: 0.3174\n","Epoch 4/50\n","419/419 [==============================] - ETA: 0s - loss: 2.3779 - accuracy: 0.3100\n","Epoch 4: val_accuracy improved from 0.31741 to 0.40758, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 15ms/step - loss: 2.3779 - accuracy: 0.3100 - val_loss: 2.0181 - val_accuracy: 0.4076\n","Epoch 5/50\n","417/419 [============================>.] - ETA: 0s - loss: 2.1081 - accuracy: 0.4070\n","Epoch 5: val_accuracy improved from 0.40758 to 0.48104, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 14ms/step - loss: 2.1074 - accuracy: 0.4069 - val_loss: 1.8187 - val_accuracy: 0.4810\n","Epoch 6/50\n","417/419 [============================>.] - ETA: 0s - loss: 1.8880 - accuracy: 0.4711\n","Epoch 6: val_accuracy improved from 0.48104 to 0.54613, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 7s 16ms/step - loss: 1.8867 - accuracy: 0.4714 - val_loss: 1.5858 - val_accuracy: 0.5461\n","Epoch 7/50\n","419/419 [==============================] - ETA: 0s - loss: 1.7694 - accuracy: 0.5068\n","Epoch 7: val_accuracy improved from 0.54613 to 0.56853, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 13ms/step - loss: 1.7694 - accuracy: 0.5068 - val_loss: 1.5606 - val_accuracy: 0.5685\n","Epoch 8/50\n","416/419 [============================>.] - ETA: 0s - loss: 1.6378 - accuracy: 0.5436\n","Epoch 8: val_accuracy improved from 0.56853 to 0.61660, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 15ms/step - loss: 1.6365 - accuracy: 0.5444 - val_loss: 1.3611 - val_accuracy: 0.6166\n","Epoch 9/50\n","415/419 [============================>.] - ETA: 0s - loss: 1.5229 - accuracy: 0.5788\n","Epoch 9: val_accuracy improved from 0.61660 to 0.64766, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 13ms/step - loss: 1.5208 - accuracy: 0.5786 - val_loss: 1.2446 - val_accuracy: 0.6477\n","Epoch 10/50\n","419/419 [==============================] - ETA: 0s - loss: 1.4396 - accuracy: 0.6051\n","Epoch 10: val_accuracy did not improve from 0.64766\n","419/419 [==============================] - 6s 15ms/step - loss: 1.4396 - accuracy: 0.6051 - val_loss: 1.2722 - val_accuracy: 0.6477\n","Epoch 11/50\n","417/419 [============================>.] - ETA: 0s - loss: 1.3296 - accuracy: 0.6337\n","Epoch 11: val_accuracy improved from 0.64766 to 0.68617, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 13ms/step - loss: 1.3297 - accuracy: 0.6337 - val_loss: 1.1149 - val_accuracy: 0.6862\n","Epoch 12/50\n","417/419 [============================>.] - ETA: 0s - loss: 1.2887 - accuracy: 0.6555\n","Epoch 12: val_accuracy improved from 0.68617 to 0.71006, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 14ms/step - loss: 1.2876 - accuracy: 0.6556 - val_loss: 1.0286 - val_accuracy: 0.7101\n","Epoch 13/50\n","415/419 [============================>.] - ETA: 0s - loss: 1.2382 - accuracy: 0.6654\n","Epoch 13: val_accuracy did not improve from 0.71006\n","419/419 [==============================] - 6s 14ms/step - loss: 1.2386 - accuracy: 0.6652 - val_loss: 1.0322 - val_accuracy: 0.7059\n","Epoch 14/50\n","418/419 [============================>.] - ETA: 0s - loss: 1.1819 - accuracy: 0.6777\n","Epoch 14: val_accuracy improved from 0.71006 to 0.71902, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 15ms/step - loss: 1.1819 - accuracy: 0.6776 - val_loss: 1.0038 - val_accuracy: 0.7190\n","Epoch 15/50\n","419/419 [==============================] - ETA: 0s - loss: 1.1223 - accuracy: 0.6957\n","Epoch 15: val_accuracy improved from 0.71902 to 0.73156, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 14ms/step - loss: 1.1223 - accuracy: 0.6957 - val_loss: 0.9900 - val_accuracy: 0.7316\n","Epoch 16/50\n","418/419 [============================>.] - ETA: 0s - loss: 1.0929 - accuracy: 0.7021\n","Epoch 16: val_accuracy improved from 0.73156 to 0.74380, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 14ms/step - loss: 1.0932 - accuracy: 0.7019 - val_loss: 0.9012 - val_accuracy: 0.7438\n","Epoch 17/50\n","416/419 [============================>.] - ETA: 0s - loss: 1.0651 - accuracy: 0.7092\n","Epoch 17: val_accuracy did not improve from 0.74380\n","419/419 [==============================] - 6s 14ms/step - loss: 1.0651 - accuracy: 0.7090 - val_loss: 0.9156 - val_accuracy: 0.7420\n","Epoch 18/50\n","419/419 [==============================] - ETA: 0s - loss: 1.0287 - accuracy: 0.7201\n","Epoch 18: val_accuracy improved from 0.74380 to 0.75037, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 13ms/step - loss: 1.0287 - accuracy: 0.7201 - val_loss: 0.9278 - val_accuracy: 0.7504\n","Epoch 19/50\n","416/419 [============================>.] - ETA: 0s - loss: 1.0043 - accuracy: 0.7248\n","Epoch 19: val_accuracy improved from 0.75037 to 0.75635, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 14ms/step - loss: 1.0032 - accuracy: 0.7250 - val_loss: 0.8765 - val_accuracy: 0.7563\n","Epoch 20/50\n","417/419 [============================>.] - ETA: 0s - loss: 0.9773 - accuracy: 0.7347\n","Epoch 20: val_accuracy improved from 0.75635 to 0.77755, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 13ms/step - loss: 0.9778 - accuracy: 0.7344 - val_loss: 0.8368 - val_accuracy: 0.7775\n","Epoch 21/50\n","419/419 [==============================] - ETA: 0s - loss: 0.9811 - accuracy: 0.7387\n","Epoch 21: val_accuracy did not improve from 0.77755\n","419/419 [==============================] - 6s 15ms/step - loss: 0.9811 - accuracy: 0.7387 - val_loss: 0.8364 - val_accuracy: 0.7737\n","Epoch 22/50\n","418/419 [============================>.] - ETA: 0s - loss: 0.9648 - accuracy: 0.7390\n","Epoch 22: val_accuracy improved from 0.77755 to 0.78710, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 13ms/step - loss: 0.9659 - accuracy: 0.7390 - val_loss: 0.8133 - val_accuracy: 0.7871\n","Epoch 23/50\n","419/419 [==============================] - ETA: 0s - loss: 0.9441 - accuracy: 0.7486\n","Epoch 23: val_accuracy did not improve from 0.78710\n","419/419 [==============================] - 7s 16ms/step - loss: 0.9441 - accuracy: 0.7486 - val_loss: 0.8093 - val_accuracy: 0.7823\n","Epoch 24/50\n","416/419 [============================>.] - ETA: 0s - loss: 0.9173 - accuracy: 0.7542\n","Epoch 24: val_accuracy did not improve from 0.78710\n","419/419 [==============================] - 6s 14ms/step - loss: 0.9167 - accuracy: 0.7546 - val_loss: 0.8347 - val_accuracy: 0.7805\n","Epoch 25/50\n","418/419 [============================>.] - ETA: 0s - loss: 0.8949 - accuracy: 0.7609\n","Epoch 25: val_accuracy did not improve from 0.78710\n","419/419 [==============================] - 6s 15ms/step - loss: 0.8948 - accuracy: 0.7610 - val_loss: 0.8387 - val_accuracy: 0.7761\n","Epoch 26/50\n","419/419 [==============================] - ETA: 0s - loss: 0.9055 - accuracy: 0.7569\n","Epoch 26: val_accuracy did not improve from 0.78710\n","419/419 [==============================] - 6s 13ms/step - loss: 0.9055 - accuracy: 0.7569 - val_loss: 0.8695 - val_accuracy: 0.7784\n","Epoch 27/50\n","418/419 [============================>.] - ETA: 0s - loss: 0.8701 - accuracy: 0.7646\n","Epoch 27: val_accuracy did not improve from 0.78710\n","419/419 [==============================] - 6s 13ms/step - loss: 0.8701 - accuracy: 0.7646 - val_loss: 0.8000 - val_accuracy: 0.7859\n","Epoch 28/50\n","415/419 [============================>.] - ETA: 0s - loss: 0.8517 - accuracy: 0.7756\n","Epoch 28: val_accuracy did not improve from 0.78710\n","419/419 [==============================] - 6s 14ms/step - loss: 0.8515 - accuracy: 0.7757 - val_loss: 0.7981 - val_accuracy: 0.7844\n","Epoch 29/50\n","417/419 [============================>.] - ETA: 0s - loss: 0.8604 - accuracy: 0.7705\n","Epoch 29: val_accuracy improved from 0.78710 to 0.80322, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 5s 13ms/step - loss: 0.8605 - accuracy: 0.7704 - val_loss: 0.7488 - val_accuracy: 0.8032\n","Epoch 30/50\n","418/419 [============================>.] - ETA: 0s - loss: 0.8064 - accuracy: 0.7821\n","Epoch 30: val_accuracy did not improve from 0.80322\n","419/419 [==============================] - 6s 14ms/step - loss: 0.8063 - accuracy: 0.7822 - val_loss: 0.7645 - val_accuracy: 0.7993\n","Epoch 31/50\n","415/419 [============================>.] - ETA: 0s - loss: 0.8250 - accuracy: 0.7790\n","Epoch 31: val_accuracy improved from 0.80322 to 0.80681, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 13ms/step - loss: 0.8246 - accuracy: 0.7792 - val_loss: 0.7547 - val_accuracy: 0.8068\n","Epoch 32/50\n","419/419 [==============================] - ETA: 0s - loss: 0.8030 - accuracy: 0.7866\n","Epoch 32: val_accuracy did not improve from 0.80681\n","419/419 [==============================] - 6s 14ms/step - loss: 0.8030 - accuracy: 0.7866 - val_loss: 0.8057 - val_accuracy: 0.7835\n","Epoch 33/50\n","418/419 [============================>.] - ETA: 0s - loss: 0.7885 - accuracy: 0.7875\n","Epoch 33: val_accuracy did not improve from 0.80681\n","419/419 [==============================] - 5s 13ms/step - loss: 0.7882 - accuracy: 0.7877 - val_loss: 0.7750 - val_accuracy: 0.7967\n","Epoch 34/50\n","417/419 [============================>.] - ETA: 0s - loss: 0.7691 - accuracy: 0.7905\n","Epoch 34: val_accuracy improved from 0.80681 to 0.81368, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 7s 16ms/step - loss: 0.7690 - accuracy: 0.7905 - val_loss: 0.7088 - val_accuracy: 0.8137\n","Epoch 35/50\n","417/419 [============================>.] - ETA: 0s - loss: 0.7688 - accuracy: 0.7904\n","Epoch 35: val_accuracy did not improve from 0.81368\n","419/419 [==============================] - 5s 13ms/step - loss: 0.7696 - accuracy: 0.7901 - val_loss: 0.7609 - val_accuracy: 0.8077\n","Epoch 36/50\n","418/419 [============================>.] - ETA: 0s - loss: 0.7705 - accuracy: 0.7961\n","Epoch 36: val_accuracy did not improve from 0.81368\n","419/419 [==============================] - 6s 15ms/step - loss: 0.7700 - accuracy: 0.7962 - val_loss: 0.7376 - val_accuracy: 0.8107\n","Epoch 37/50\n","415/419 [============================>.] - ETA: 0s - loss: 0.7640 - accuracy: 0.7931\n","Epoch 37: val_accuracy improved from 0.81368 to 0.81845, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 14ms/step - loss: 0.7629 - accuracy: 0.7932 - val_loss: 0.6919 - val_accuracy: 0.8185\n","Epoch 38/50\n","418/419 [============================>.] - ETA: 0s - loss: 0.7490 - accuracy: 0.7994\n","Epoch 38: val_accuracy did not improve from 0.81845\n","419/419 [==============================] - 7s 16ms/step - loss: 0.7484 - accuracy: 0.7996 - val_loss: 0.7001 - val_accuracy: 0.8137\n","Epoch 39/50\n","419/419 [==============================] - ETA: 0s - loss: 0.7468 - accuracy: 0.7967\n","Epoch 39: val_accuracy did not improve from 0.81845\n","419/419 [==============================] - 6s 14ms/step - loss: 0.7468 - accuracy: 0.7967 - val_loss: 0.7154 - val_accuracy: 0.8116\n","Epoch 40/50\n","416/419 [============================>.] - ETA: 0s - loss: 0.7335 - accuracy: 0.8038\n","Epoch 40: val_accuracy did not improve from 0.81845\n","419/419 [==============================] - 6s 14ms/step - loss: 0.7325 - accuracy: 0.8040 - val_loss: 0.7080 - val_accuracy: 0.8146\n","Epoch 41/50\n","416/419 [============================>.] - ETA: 0s - loss: 0.7324 - accuracy: 0.8034\n","Epoch 41: val_accuracy did not improve from 0.81845\n","419/419 [==============================] - 6s 14ms/step - loss: 0.7315 - accuracy: 0.8036 - val_loss: 0.7138 - val_accuracy: 0.8146\n","Epoch 42/50\n","415/419 [============================>.] - ETA: 0s - loss: 0.7427 - accuracy: 0.8038\n","Epoch 42: val_accuracy did not improve from 0.81845\n","419/419 [==============================] - 6s 13ms/step - loss: 0.7448 - accuracy: 0.8035 - val_loss: 0.6911 - val_accuracy: 0.8146\n","Epoch 43/50\n","416/419 [============================>.] - ETA: 0s - loss: 0.7147 - accuracy: 0.8128\n","Epoch 43: val_accuracy did not improve from 0.81845\n","419/419 [==============================] - 6s 15ms/step - loss: 0.7146 - accuracy: 0.8128 - val_loss: 0.6888 - val_accuracy: 0.8158\n","Epoch 44/50\n","419/419 [==============================] - ETA: 0s - loss: 0.6978 - accuracy: 0.8113\n","Epoch 44: val_accuracy improved from 0.81845 to 0.82562, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 13ms/step - loss: 0.6978 - accuracy: 0.8113 - val_loss: 0.6697 - val_accuracy: 0.8256\n","Epoch 45/50\n","418/419 [============================>.] - ETA: 0s - loss: 0.7032 - accuracy: 0.8149\n","Epoch 45: val_accuracy did not improve from 0.82562\n","419/419 [==============================] - 6s 15ms/step - loss: 0.7035 - accuracy: 0.8149 - val_loss: 0.6969 - val_accuracy: 0.8170\n","Epoch 46/50\n","415/419 [============================>.] - ETA: 0s - loss: 0.7075 - accuracy: 0.8110\n","Epoch 46: val_accuracy did not improve from 0.82562\n","419/419 [==============================] - 6s 14ms/step - loss: 0.7088 - accuracy: 0.8104 - val_loss: 0.7085 - val_accuracy: 0.8229\n","Epoch 47/50\n","416/419 [============================>.] - ETA: 0s - loss: 0.6993 - accuracy: 0.8135\n","Epoch 47: val_accuracy did not improve from 0.82562\n","419/419 [==============================] - 7s 16ms/step - loss: 0.7004 - accuracy: 0.8132 - val_loss: 0.6812 - val_accuracy: 0.8229\n","Epoch 48/50\n","415/419 [============================>.] - ETA: 0s - loss: 0.6959 - accuracy: 0.8156\n","Epoch 48: val_accuracy did not improve from 0.82562\n","419/419 [==============================] - 6s 13ms/step - loss: 0.6957 - accuracy: 0.8155 - val_loss: 0.6928 - val_accuracy: 0.8173\n","Epoch 49/50\n","416/419 [============================>.] - ETA: 0s - loss: 0.6976 - accuracy: 0.8130\n","Epoch 49: val_accuracy did not improve from 0.82562\n","419/419 [==============================] - 7s 16ms/step - loss: 0.6971 - accuracy: 0.8132 - val_loss: 0.6949 - val_accuracy: 0.8226\n","Epoch 50/50\n","415/419 [============================>.] - ETA: 0s - loss: 0.6792 - accuracy: 0.8174\n","Epoch 50: val_accuracy improved from 0.82562 to 0.82920, saving model to thesimpsonscharacters_weights.hdf5\n","419/419 [==============================] - 6s 14ms/step - loss: 0.6790 - accuracy: 0.8175 - val_loss: 0.6593 - val_accuracy: 0.8292\n"]}]},{"cell_type":"code","source":["print(np.unique(y_train_encoded))\n","print(np.unique(y_test_encoded))"],"metadata":{"id":"-wgVPKjsUeLi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1704137051616,"user_tz":180,"elapsed":302,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}},"outputId":"0cddfc2c-7814-49b5-9a88-5ac7c547830c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n"," 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41]\n","[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 20 21 22 23 24\n"," 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41]\n"]}]},{"cell_type":"code","source":["plt.plot(history.history['accuracy'])\n","plt.plot(history.history['val_accuracy'])\n","plt.title('model accuracy')\n","plt.ylabel('accuracy')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'test'], loc='upper right')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"LMvt8HVpjnNp","executionInfo":{"status":"ok","timestamp":1704138286387,"user_tz":180,"elapsed":910,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}},"outputId":"d75c64c0-c60c-4d7c-d80f-5e8665b54e10"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.plot(history.history['loss'])\n","plt.plot(history.history['val_loss'])\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'test'], loc='upper right')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"RPXD0So4kDS7","executionInfo":{"status":"ok","timestamp":1704138392234,"user_tz":180,"elapsed":583,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}},"outputId":"3a35a66e-8814-4dd3-b08c-0418a96b7e69"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["%%file myPipeline.py\n","\n","import numpy as np\n","from PIL import Image\n","from sklearn.base import BaseEstimator, TransformerMixin\n","from sklearn.pipeline import Pipeline\n","\n","class ImageProcessor(BaseEstimator, TransformerMixin):\n","    def __init__(self, target_size=(100, 100)):\n","        self.target_size = target_size\n","\n","    def fit(self, X, y=None):\n","        return self\n","\n","    def transform(self, X):\n","        processed_images = []\n","\n","        for item in X:\n","            if isinstance(item, np.ndarray):\n","\n","                im = item.astype('float32')\n","\n","                if im.max() > 1.0:\n","\n","                    im /= 255.0\n","            elif isinstance(item, Image.Image):\n","\n","                im = item.copy()\n","\n","                if im.mode != 'RGBA':\n","                    im = im.convert('RGBA')\n","\n","                im = im.resize(self.target_size)\n","\n","                im = np.array(im, dtype='float32')\n","\n","                if im.max() > 1.0:\n","\n","                    im /= 255.0\n","            else:\n","                raise ValueError(\"The entry data type is not supported\")\n","\n","\n","            processed_images.append(im)\n","\n","        return np.array(processed_images)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wbAyTs28nzxv","executionInfo":{"status":"ok","timestamp":1704145025316,"user_tz":180,"elapsed":305,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}},"outputId":"709e858e-5399-47fa-87e5-57e733fef398"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting myPipeline.py\n"]}]},{"cell_type":"code","source":["from myPipeline import ImageProcessor"],"metadata":{"id":"2VzU2AZ4o4xt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["loaded_model = tf.keras.models.load_model('thesimpsonscharacters_weights.hdf5')"],"metadata":{"id":"yG6j92-Jrzk7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pipeline = Pipeline([\n","    ('normalizador', ImageProcessor(target_size=(100, 100))),\n","    ('model', loaded_model)\n","])"],"metadata":{"id":"vZL3zzJgr9Pz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Using the pipeline"],"metadata":{"id":"BUo_6pFXsLvV"}},{"cell_type":"code","source":["predictions = pipeline.predict(X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gUslc1lysK14","executionInfo":{"status":"ok","timestamp":1704140542419,"user_tz":180,"elapsed":5074,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}},"outputId":"29cf5b67-5449-4f12-8f20-d244a3ba06bc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["105/105 [==============================] - 1s 5ms/step\n"]}]},{"cell_type":"code","source":["predict = []\n","for i in predictions:\n","    predict.append(np.argmax(i))"],"metadata":{"id":"eQZi1zQcsXIw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(classification_report(y_test_encoded, predict))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QowzRPhlsaOA","executionInfo":{"status":"ok","timestamp":1704140601298,"user_tz":180,"elapsed":283,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}},"outputId":"b9fb389b-13da-40d9-bafe-f500f5acfe40"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.85      0.83      0.84       146\n","           1       1.00      0.43      0.60         7\n","           2       0.92      0.88      0.90       100\n","           3       0.33      0.06      0.10        17\n","           4       0.83      0.77      0.80       215\n","           5       0.47      0.44      0.45        16\n","           6       0.80      0.79      0.80       191\n","           7       0.79      0.92      0.85       158\n","           8       0.00      0.00      0.00         8\n","           9       0.79      0.72      0.76        75\n","          10       0.00      0.00      0.00         1\n","          11       0.85      0.84      0.84        73\n","          12       0.00      0.00      0.00         4\n","          13       0.00      0.00      0.00         4\n","          14       0.39      0.58      0.47        19\n","          15       0.77      0.92      0.84       360\n","          16       0.92      0.90      0.91        80\n","          17       0.94      0.97      0.95       193\n","          18       0.97      0.68      0.80        50\n","          20       0.71      0.77      0.74       217\n","          21       0.83      0.25      0.38        20\n","          22       0.96      0.94      0.95       207\n","          23       0.50      0.18      0.27        11\n","          24       0.96      0.56      0.71        39\n","          25       0.97      0.91      0.94       173\n","          26       0.00      0.00      0.00         3\n","          27       0.81      0.90      0.85       232\n","          28       0.93      0.91      0.92       233\n","          29       0.58      0.86      0.69        57\n","          30       0.00      0.00      0.00         5\n","          31       0.00      0.00      0.00        12\n","          32       0.83      0.90      0.86       191\n","          33       0.00      0.00      0.00        10\n","          34       0.00      0.00      0.00         7\n","          35       0.67      0.14      0.24        14\n","          36       0.43      0.75      0.55        16\n","          37       0.92      0.87      0.89       140\n","          38       0.00      0.00      0.00         6\n","          39       0.60      0.33      0.43         9\n","          40       0.00      0.00      0.00         1\n","          41       0.65      0.59      0.62        29\n","\n","    accuracy                           0.83      3349\n","   macro avg       0.56      0.50      0.51      3349\n","weighted avg       0.82      0.83      0.82      3349\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["from joblib import dump, load"],"metadata":{"id":"tnQc8r4js8Gc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dump(pipeline, 'pipeline.joblib')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZuzTIjK1s-U7","executionInfo":{"status":"ok","timestamp":1704140745500,"user_tz":180,"elapsed":291,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}},"outputId":"74575116-255a-482b-fcd8-40b2a7b038ed"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['pipeline.joblib']"]},"metadata":{},"execution_count":42}]},{"cell_type":"markdown","source":["# Creating pipeline artifact"],"metadata":{"id":"wi9TslAJtgdA"}},{"cell_type":"code","source":["artifact = wandb.Artifact(name=\"the_simpsons_character_model_pipeline\",\n","                                type=\"pipeline\",\n","                                description=\"pipeline of the trained the simpsons model\",\n","      )\n","\n","# adiciona o modelo no artefato\n","artifact.add_file(\"/content/pipeline.joblib\")\n","\n","wandb.run.log_artifact(artifact)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A4SC-KsotJqO","executionInfo":{"status":"ok","timestamp":1704142118228,"user_tz":180,"elapsed":289,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}},"outputId":"47453a2c-8a58-4e08-deb3-3b3c109525a1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Artifact the_simpsons_character_model_pipeline>"]},"metadata":{},"execution_count":49}]},{"cell_type":"markdown","source":["# Creating Normalizer artifact"],"metadata":{"id":"eXA-aGmstmNI"}},{"cell_type":"code","source":["artifact = wandb.Artifact(name=\"image_processor_class\",\n","                                type=\"python\",\n","                                description=\"class needed to use in transform of our pipeline\",\n","      )\n","\n","# adiciona o modelo no artefato\n","artifact.add_file(\"/content/myPipeline.py\")\n","\n","wandb.run.log_artifact(artifact)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m0lS9sg1tfXP","executionInfo":{"status":"ok","timestamp":1704145170547,"user_tz":180,"elapsed":297,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}},"outputId":"23609e7a-17f8-4db6-8572-c7cce4969092"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Artifact image_processor_class>"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["run.finish()"],"metadata":{"id":"yV730FJmI819","colab":{"base_uri":"https://localhost:8080/","height":69,"referenced_widgets":["b0a62fedcef5420da46bb6a959f65f29","c2a911f398304ea8a0c2aa65c3b89c44","902f6b8a60764e85b7a3191a5b2bee52","f5dc650b1f1d49aa8216b35e2eaddfd2","63d3bf55795046099727ad1b5cf0b4f7","8a394ad801214fe68cf6db76d77aff53","7fff7f0abebf43b8a15509de3220e391","8eabfea3bb824a28b8a24b906d09b9e8"]},"executionInfo":{"status":"ok","timestamp":1704142206057,"user_tz":180,"elapsed":3229,"user":{"displayName":"André Gustavo da Silva","userId":"11095299052392562176"}},"outputId":"e5aa555f-e821-40e6-f231-f61a40f4d0b8"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["VBox(children=(Label(value='13.037 MB of 13.037 MB uploaded\\r'), FloatProgress(value=1.0, max=1.0)))"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b0a62fedcef5420da46bb6a959f65f29"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":[" View run <strong style=\"color:#cdcd00\">ethereal-planet-29</strong> at: <a href='https://wandb.ai/flateam/the_simpsons_characters/runs/pd9ho2li' target=\"_blank\">https://wandb.ai/flateam/the_simpsons_characters/runs/pd9ho2li</a><br/>Synced 4 W&B file(s), 0 media file(s), 2 artifact file(s) and 0 other file(s)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["Find logs at: <code>./wandb/run-20240101_204808-pd9ho2li/logs</code>"]},"metadata":{}}]}]}